import API from './index'

export const registerUser = async (formData: {
  username: string;
  email: string;
  password: string;
  confirmPassword: string;
}) => {
  try {
    const response = await API.post('/users/register', formData);
    return response.data;
  } catch (error: any) {
    // Handle axios error response
    if (error.response && error.response.data) {
      // Server responded with error status
      throw new Error(error.response.data.message || 'Registration failed');
    } else if (error.request) {
      // Network error
      throw new Error('Network error. Please check your connection.');
    } else {
      // Other error
      throw new Error('An unexpected error occurred.');
    }
  }
}

export const sendOtp = async (email: string) => {
  try {
    console.log('üìß Frontend API: G·ª≠i OTP ƒë·∫øn:', email);
    const response = await API.post('/users/send-otp', { email });
    console.log('‚úÖ Frontend API: OTP g·ª≠i th√†nh c√¥ng:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Frontend API: L·ªói g·ª≠i OTP:', error);
    
    // Ki·ªÉm tra lo·∫°i l·ªói c·ª• th·ªÉ
    if (error.code === 'ECONNABORTED') {
      throw new Error('Request timeout - Server kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i.');
    } else if (error.code === 'ERR_NETWORK') {
      throw new Error('L·ªói k·∫øt n·ªëi m·∫°ng - Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra internet.');
    } else if (error.response && error.response.data) {
      const errorData = error.response.data;
      if (errorData.details) {
        throw new Error(`G·ª≠i OTP th·∫•t b·∫°i: ${errorData.details}`);
      } else {
        throw new Error(errorData.message || 'G·ª≠i OTP th·∫•t b·∫°i');
      }
    } else if (error.request) {
      throw new Error('L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.');
    } else {
      throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i OTP: ${error.message}`);
    }
  }
};

export const verifyOtp = async (email: string, otp: string) => {
  try {
    console.log('üîê Frontend API: X√°c th·ª±c OTP cho:', email);
    const response = await API.post('/users/verify-otp', { email, otp });
    console.log('‚úÖ Frontend API: OTP x√°c th·ª±c th√†nh c√¥ng:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Frontend API: L·ªói x√°c th·ª±c OTP:', error);
    
    // Ki·ªÉm tra lo·∫°i l·ªói c·ª• th·ªÉ
    if (error.code === 'ECONNABORTED') {
      throw new Error('Request timeout - Server kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i.');
    } else if (error.code === 'ERR_NETWORK') {
      throw new Error('L·ªói k·∫øt n·ªëi m·∫°ng - Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra internet.');
    } else if (error.response && error.response.data) {
      const errorData = error.response.data;
      throw new Error(errorData.message || 'X√°c th·ª±c OTP th·∫•t b·∫°i');
    } else if (error.request) {
      throw new Error('L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.');
    } else {
      throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh khi x√°c th·ª±c OTP: ${error.message}`);
    }
  }
};