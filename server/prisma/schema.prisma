generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comment_likes {
  id         Int      @id @default(autoincrement())
  user_id    Int
  comment_id Int
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @db.DateTime(0)
  comments   comments @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, comment_id])
  @@index([user_id])
  @@index([comment_id])
}

model comments {
  id        Int          @id @default(autoincrement())
  user_id   Int
  post_id   Int
  content   String          @db.Text
  createdAt DateTime        @default(now()) @db.DateTime(0)
  updatedAt DateTime        @default(now()) @db.DateTime(0)
  parent_id Int?
  likes     comment_likes[]
  users     users           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "comments_ibfk_1")
  posts     posts           @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "comments_ibfk_2")
  parent    comments?       @relation("CommentToReplies", fields: [parent_id], references: [id])
  replies   comments[]      @relation("CommentToReplies")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
  @@index([parent_id])
}

model follows {
  id                                Int   @id @default(autoincrement())
  follower_id                       Int
  following_id                      Int
  createdAt                         DateTime @db.DateTime(0)
  updatedAt                         DateTime @db.DateTime(0)
  users_follows_follower_idTousers  users    @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, map: "follows_ibfk_1")
  users_follows_following_idTousers users    @relation("follows_following_idTousers", fields: [following_id], references: [id], onDelete: Cascade, map: "follows_ibfk_2")

  @@index([follower_id], map: "follower_id")
  @@index([following_id], map: "following_id")
}

model likes {
  id        Int   @id @default(autoincrement())
  user_id   Int
  post_id   Int
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
  users     users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "likes_ibfk_1")
  posts     posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "likes_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "likes_ibfk_1")
}

model messages {
  id                                Int   @id @default(autoincrement())
  sender_id                         Int
  receiver_id                       Int
  content                           String   @db.Text
  message_type                      String   @default("text") @db.VarChar(20) // text, image, file
  file_url                          String?  @db.VarChar(255)
  file_name                         String?  @db.VarChar(255)
  file_size                         Int?
  is_read                           Boolean  @default(false)
  read_at                           DateTime?
  room_id                           String   @db.VarChar(100) // Unique room for 2 users
  createdAt                         DateTime @default(now()) @db.DateTime(0)
  updatedAt                         DateTime @updatedAt @db.DateTime(0)
  
  sender                            users    @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver                          users    @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Cascade)
  
  // Relations for chat rooms
  chat_room_last_message            chat_rooms? @relation("chat_rooms_last_message")
  chat_room_messages                chat_rooms? @relation("chat_rooms_messages", fields: [room_id], references: [id])

  @@index([sender_id])
  @@index([receiver_id])
  @@index([room_id])
  @@index([createdAt])
}

model chat_rooms {
  id                String    @id @default(uuid()) @db.VarChar(100)
  user1_id          Int
  user2_id          Int
  last_message_id   Int?
  last_message_at   DateTime?
  created_at        DateTime  @default(now()) @db.DateTime(0)
  updated_at        DateTime  @updatedAt @db.DateTime(0)
  
  user1             users     @relation("chat_rooms_user1", fields: [user1_id], references: [id], onDelete: Cascade)
  user2             users     @relation("chat_rooms_user2", fields: [user2_id], references: [id], onDelete: Cascade)
  last_message      messages? @relation("chat_rooms_last_message", fields: [last_message_id], references: [id])
  messages          messages[] @relation("chat_rooms_messages")
  
  @@unique([user1_id, user2_id])
  @@unique([last_message_id])
  @@index([user1_id])
  @@index([user2_id])
  @@index([last_message_at])
}

model notifications {
  id        Int   @id @default(autoincrement())
  user_id   Int
  type      String   @db.VarChar(50)
  content   String   @db.Text
  is_read   Boolean  @default(false)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  users     users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "notifications_ibfk_1")

  @@index([user_id], map: "user_id")
}

model posts {
  id             Int          @id @default(autoincrement())
  user_id        Int
  user_name      String          @db.VarChar(45)
  title          String          @db.Text
  content        String          @db.Text
  image_url      String          @db.VarChar(255)
  dominant_color String?         @db.VarChar(7)
  createdAt      DateTime        @db.DateTime(0)
  updatedAt      DateTime        @db.DateTime(0)
  comments       comments[]
  likes          likes[]
  relatedPosts   related_posts[] @relation("PostToRelated")
  relatedToPosts related_posts[] @relation("RelatedToPost")
  postTags       post_tags[]
  reportPosts    report_posts[]
  savedPosts     saved_posts[]

  users users @relation(fields: [user_id], references: [id])
}

model related_posts {
  id          Int   @id @default(autoincrement())
  post_id     Int
  related_id  Int
  post        posts    @relation("PostToRelated", fields: [post_id], references: [id], onDelete: Cascade)
  relatedPost posts    @relation("RelatedToPost", fields: [related_id], references: [id], onDelete: Cascade)

  @@unique([post_id, related_id])
  @@index([post_id])
  @@index([related_id])
}

model tags {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(50)
  createdAt DateTime    @default(now()) @db.DateTime(0)
  updatedAt DateTime    @default(now()) @db.DateTime(0)
  postTags  post_tags[]
}

model post_tags {
  id      Int   @id @default(autoincrement())
  post_id Int
  tag_id  Int
  post    posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  tag     tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([post_id, tag_id])
  @@index([post_id])
  @@index([tag_id])
}

model report_posts {
  id          Int   @id @default(autoincrement())
  post_id     Int
  user_id     Int
  reporter_id Int
  reason      String   @db.Text
  createdAt   DateTime @default(now()) @db.DateTime(0)
  resolved    Boolean  @default(false)
  resolvedAt  DateTime? @db.DateTime(0)

  posts posts @relation(fields: [post_id], references: [id], onDelete: Cascade)
  users users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)

  @@index([post_id])
  @@index([reporter_id])
}

model sequelizemeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model users {
  id                                   Int          @id @default(autoincrement())
  username                             String?         @unique(map: "username") @db.VarChar(50)
  email                                String          @unique(map: "email") @db.VarChar(100)
  password                             String?         @db.VarChar(255)
  bio                                  String?         @db.Text
  avatar_url                           String?         @db.VarChar(255)
  createdAt                            DateTime        @default(now()) @db.DateTime(0)
  updatedAt                            DateTime        @default(now()) @db.DateTime(0)
  onboarded                            Boolean         @default(false)
  gender                               String?         @db.VarChar(50)
  emailVerified                        DateTime?
  image                                String?         @db.VarChar(255)
  Account                              Account[]
  Session                              Session[]
  comment_likes                        comment_likes[]
  comments                             comments[]
  follows_follows_follower_idTousers   follows[]       @relation("follows_follower_idTousers")
  follows_follows_following_idTousers  follows[]       @relation("follows_following_idTousers")
  likes                                likes[]
  messages_messages_sender_idTousers   messages[]      @relation("messages_sender_idTousers")
  messages_messages_receiver_idTousers messages[]      @relation("messages_receiver_idTousers")
  chat_rooms_user1                    chat_rooms[]    @relation("chat_rooms_user1")
  chat_rooms_user2                    chat_rooms[]    @relation("chat_rooms_user2")
  notifications                        notifications[]
  report_posts                         report_posts[]
  saved_posts                          saved_posts[]

  userTopics user_topics[]
  posts posts[]
}

model topics {
  id        Int           @id @default(autoincrement())
  name      String        @unique @db.VarChar(50)
  image_url String?       @db.VarChar(255)
  createdAt DateTime      @default(now()) @db.DateTime(0)
  updatedAt DateTime      @default(now()) @db.DateTime(0)
  users     user_topics[]
}

model user_topics {
  id       Int      @id @default(autoincrement())
  user_id  Int
  topic_id Int

  user  users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  topic topics @relation(fields: [topic_id], references: [id], onDelete: Cascade)

  @@unique([user_id, topic_id])
  @@index([user_id])
  @@index([topic_id])
}
model Account {
  id                String  @id
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model banned_keywords {
  id        Int      @id @default(autoincrement())
  word      String   @unique
  createdAt DateTime @default(now())
}

model saved_posts {
  id        Int      @id @default(autoincrement())
  user_id   Int
  post_id   Int
  createdAt DateTime @default(now()) @db.DateTime(0)
  user      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
  @@index([user_id])
  @@index([post_id])
}
